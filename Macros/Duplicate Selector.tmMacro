<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>commands</key>
	<array>
		<dict>
			<key>argument</key>
			<dict>
				<key>beforeRunningCommand</key>
				<string>nop</string>
				<key>command</key>
				<string>#!/usr/bin/env ruby

def find_nth_occurrence(var, substring, n)
	position = -1
	if n > 0 &amp;&amp; var.include?(substring) # is n positive, and var includes substring
		i = 0
		while i < n do
			position = var.index(substring, position+substring.length) if position != nil
			i += 1
		end
	end
	# return the index of the nth occurrence of substring if it exists, otherwise -1
	return position != nil &amp;&amp; position != -1 ? position + 1 : -1; 
end

css = STDIN.read

line_number = ENV['TM_LINE_NUMBER'].to_i - 1;
column = ENV['TM_LINE_INDEX'].to_i;
line = ENV['TM_CURRENT_LINE'];
scope = ENV['TM_SCOPE'];

length = css.length

real_offset = find_nth_occurrence(css, "\n", line_number) + column;

# We are doing something only if we are in valid scope
if scope.include?("property-list")
  opening_bracket = css.rindex('{', real_offset - length)
  closing_bracket = css.index('}', real_offset)
  previous_bracket = css.rindex('}', real_offset - length)
  
  
  if !(closing_bracket == nil || opening_bracket == nil)
    rule_start = ""
  
    # If we are at the beginning of file
    if previous_bracket == nil
      previous_bracket = 0
      closing_bracket += 1
      rule_start = "\n\n"
    end
  
    # Getting rule text to copy
    rule_start += css.slice(previous_bracket, real_offset - previous_bracket)
  
    # Removing @keywords
    rule_start = rule_start.gsub(/\s*@.*;\s*/, "")
  
    # Removing comments
    rule_start = rule_start.gsub(/\/\*(.|\n)*\*\//, "")
    rule_start = rule_start.gsub(/(\s*\n){2,}/, "\n\n")
  
    # Copying the rest of the rule
    rule_end = css.slice(real_offset, closing_bracket - real_offset)
    
    # Outputting all we got
    print rule_end, rule_start
  end
end</string>
				<key>fallbackInput</key>
				<string>scope</string>
				<key>input</key>
				<string>document</string>
				<key>keyEquivalent</key>
				<string>@d</string>
				<key>name</key>
				<string>Duplicate Selector</string>
				<key>output</key>
				<string>afterSelectedText</string>
				<key>scope</key>
				<string>source.css meta.property-list.css</string>
				<key>uuid</key>
				<string>C6203EED-D961-4BA9-AC12-3D7EBC210133</string>
			</dict>
			<key>command</key>
			<string>executeCommandWithOptions:</string>
		</dict>
		<dict>
			<key>argument</key>
			<dict>
				<key>commands</key>
				<array>
					<dict>
						<key>argument</key>
						<dict>
							<key>action</key>
							<string>findNext</string>
							<key>findString</key>
							<string>}</string>
							<key>ignoreCase</key>
							<false/>
							<key>regularExpression</key>
							<false/>
							<key>replaceAllScope</key>
							<string>document</string>
							<key>wrapAround</key>
							<false/>
						</dict>
						<key>command</key>
						<string>findWithOptions:</string>
					</dict>
					<dict>
						<key>argument</key>
						<dict>
							<key>action</key>
							<string>findPrevious</string>
							<key>findString</key>
							<string>{</string>
							<key>ignoreCase</key>
							<false/>
							<key>regularExpression</key>
							<false/>
							<key>replaceAllScope</key>
							<string>document</string>
							<key>wrapAround</key>
							<false/>
						</dict>
						<key>command</key>
						<string>findWithOptions:</string>
					</dict>
					<dict>
						<key>command</key>
						<string>moveLeft:</string>
					</dict>
					<dict>
						<key>argument</key>
						<dict>
							<key>action</key>
							<string>count</string>
							<key>findString</key>
							<string>(?m:\{[^}]*\})</string>
							<key>ignoreCase</key>
							<false/>
							<key>regularExpression</key>
							<true/>
							<key>replaceAllScope</key>
							<string>document</string>
							<key>wrapAround</key>
							<false/>
						</dict>
						<key>command</key>
						<string>findWithOptions:</string>
					</dict>
					<dict>
						<key>argument</key>
						<dict>
							<key>action</key>
							<string>replaceAndFind</string>
							<key>findString</key>
							<string>(?m:\{[^}]*\})</string>
							<key>ignoreCase</key>
							<false/>
							<key>regularExpression</key>
							<true/>
							<key>replaceAllScope</key>
							<string>document</string>
							<key>wrapAround</key>
							<false/>
						</dict>
						<key>command</key>
						<string>findWithOptions:</string>
					</dict>
					<dict>
						<key>argument</key>
						<dict>
							<key>action</key>
							<string>replace</string>
							<key>findString</key>
							<string>(?m:\{[^}]*\})</string>
							<key>ignoreCase</key>
							<false/>
							<key>regularExpression</key>
							<true/>
							<key>replaceAllScope</key>
							<string>document</string>
							<key>wrapAround</key>
							<false/>
						</dict>
						<key>command</key>
						<string>findWithOptions:</string>
					</dict>
					<dict>
						<key>argument</key>
						<string>{</string>
						<key>command</key>
						<string>insertText:</string>
					</dict>
					<dict>
						<key>command</key>
						<string>insertNewline:</string>
					</dict>
				</array>
			</dict>
			<key>command</key>
			<string>playMacroWithOptions:</string>
		</dict>
	</array>
	<key>keyEquivalent</key>
	<string>@d</string>
	<key>name</key>
	<string>Duplicate Selector</string>
	<key>scope</key>
	<string>source.css meta.property-list.css</string>
	<key>uuid</key>
	<string>D816A165-45BD-451D-97E2-7A7877EA2641</string>
</dict>
</plist>
